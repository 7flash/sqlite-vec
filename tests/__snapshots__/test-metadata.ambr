# serializer version: 1
# name: test_constructor_limit[max 16 metadata columns]
  dict({
    'error': 'OperationalError',
    'message': 'vec0 constructor error: More than 16 metadata columns were provided',
  })
# ---
# name: test_knn.1
  dict({
    'error': 'OperationalError',
    'message': 'An illegal WHERE constraint was provided on a vec0 metadata column in a KNN query. Only one of EQUALS, GREATER_THAN, LESS_THAN_OR_EQUAL, LESS_THAN, GREATER_THAN_OR_EQUAL, NOT_EQUALS is allowed.',
  })
# ---
# name: test_knn[sqlite_master]
  OrderedDict({
    'sql': "select * from sqlite_master where type = 'table' order by name",
    'rows': list([
      OrderedDict({
        'type': 'table',
        'name': 'sqlite_sequence',
        'tbl_name': 'sqlite_sequence',
        'rootpage': 3,
        'sql': 'CREATE TABLE sqlite_sequence(name,seq)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v',
        'tbl_name': 'v',
        'rootpage': 0,
        'sql': 'CREATE VIRTUAL TABLE v using vec0(vector float[1], name text, chunk_size=8)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_chunks',
        'tbl_name': 'v_chunks',
        'rootpage': 2,
        'sql': 'CREATE TABLE "v_chunks"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_metadata_chunks00',
        'tbl_name': 'v_metadata_chunks00',
        'rootpage': 7,
        'sql': 'CREATE TABLE "v_metadata_chunks00"(rowid PRIMARY KEY, data BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_rowids',
        'tbl_name': 'v_rowids',
        'rootpage': 4,
        'sql': 'CREATE TABLE "v_rowids"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_vector_chunks00',
        'tbl_name': 'v_vector_chunks00',
        'rootpage': 5,
        'sql': 'CREATE TABLE "v_vector_chunks00"(rowid PRIMARY KEY,vectors BLOB NOT NULL)',
      }),
    ]),
  })
# ---
# name: test_normal.1
  dict({
    'v_chunks': OrderedDict({
      'sql': 'select * from v_chunks',
      'rows': list([
      ]),
    }),
    'v_metadata_chunks00': OrderedDict({
      'sql': 'select * from v_metadata_chunks00',
      'rows': list([
      ]),
    }),
    'v_metadata_chunks01': OrderedDict({
      'sql': 'select * from v_metadata_chunks01',
      'rows': list([
      ]),
    }),
    'v_metadata_chunks02': OrderedDict({
      'sql': 'select * from v_metadata_chunks02',
      'rows': list([
      ]),
    }),
    'v_metadata_chunks03': OrderedDict({
      'sql': 'select * from v_metadata_chunks03',
      'rows': list([
      ]),
    }),
    'v_metadata_chunks04': OrderedDict({
      'sql': 'select * from v_metadata_chunks04',
      'rows': list([
      ]),
    }),
    'v_rowids': OrderedDict({
      'sql': 'select * from v_rowids',
      'rows': list([
      ]),
    }),
    'v_vector_chunks00': OrderedDict({
      'sql': 'select * from v_vector_chunks00',
      'rows': list([
      ]),
    }),
  })
# ---
# name: test_normal.2
  OrderedDict({
    'sql': 'insert into v(vector, n1, n2, f, d, t) values (?, ?, ?, ?, ?, ?)',
    'rows': list([
    ]),
  })
# ---
# name: test_normal.3
  OrderedDict({
    'sql': 'insert into v(vector, n1, n2, f, d, t) values (?, ?, ?, ?, ?, ?)',
    'rows': list([
    ]),
  })
# ---
# name: test_normal.4
  OrderedDict({
    'sql': 'insert into v(vector, n1, n2, f, d, t) values (?, ?, ?, ?, ?, ?)',
    'rows': list([
    ]),
  })
# ---
# name: test_normal.5
  OrderedDict({
    'sql': 'select * from v',
    'rows': list([
      OrderedDict({
        'rowid': 1,
        'vector': b'\x11\x11\x11\x11',
        'n1': 1,
        'n2': 1,
        'f': 1.100000023841858,
        'd': 1.1,
        't': 'one',
      }),
      OrderedDict({
        'rowid': 2,
        'vector': b'""""',
        'n1': 2,
        'n2': 2,
        'f': 2.200000047683716,
        'd': 2.2,
        't': 'two',
      }),
      OrderedDict({
        'rowid': 3,
        'vector': b'3333',
        'n1': 3,
        'n2': 3,
        'f': 3.299999952316284,
        'd': 3.3,
        't': 'three',
      }),
    ]),
  })
# ---
# name: test_normal.6
  dict({
    'v_chunks': OrderedDict({
      'sql': 'select * from v_chunks',
      'rows': list([
        OrderedDict({
          'chunk_id': 1,
          'size': 8,
          'validity': b'\x07',
          'rowids': b'\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'v_metadata_chunks00': OrderedDict({
      'sql': 'select * from v_metadata_chunks00',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'v_metadata_chunks01': OrderedDict({
      'sql': 'select * from v_metadata_chunks01',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'v_metadata_chunks02': OrderedDict({
      'sql': 'select * from v_metadata_chunks02',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\xcd\xcc\x8c?\xcd\xcc\x0c@33S@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'v_metadata_chunks03': OrderedDict({
      'sql': 'select * from v_metadata_chunks03',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\x9a\x99\x99\x99\x99\x99\xf1?\x9a\x99\x99\x99\x99\x99\x01@ffffff\n@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'v_metadata_chunks04': OrderedDict({
      'sql': 'select * from v_metadata_chunks04',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\x03\x00\x00\x00one\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00two\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00three\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'v_rowids': OrderedDict({
      'sql': 'select * from v_rowids',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 0,
        }),
        OrderedDict({
          'rowid': 2,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 1,
        }),
        OrderedDict({
          'rowid': 3,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 2,
        }),
      ]),
    }),
    'v_vector_chunks00': OrderedDict({
      'sql': 'select * from v_vector_chunks00',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'vectors': b'\x11\x11\x11\x11""""3333\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
  })
# ---
# name: test_normal[sqlite_master]
  OrderedDict({
    'sql': "select * from sqlite_master where type = 'table' order by name",
    'rows': list([
      OrderedDict({
        'type': 'table',
        'name': 'sqlite_sequence',
        'tbl_name': 'sqlite_sequence',
        'rootpage': 3,
        'sql': 'CREATE TABLE sqlite_sequence(name,seq)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v',
        'tbl_name': 'v',
        'rootpage': 0,
        'sql': 'CREATE VIRTUAL TABLE v using vec0(vector float[1], n1 int, n2 int64, f float, d double, t text, chunk_size=8)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_chunks',
        'tbl_name': 'v_chunks',
        'rootpage': 2,
        'sql': 'CREATE TABLE "v_chunks"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_metadata_chunks00',
        'tbl_name': 'v_metadata_chunks00',
        'rootpage': 7,
        'sql': 'CREATE TABLE "v_metadata_chunks00"(rowid PRIMARY KEY, data BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_metadata_chunks01',
        'tbl_name': 'v_metadata_chunks01',
        'rootpage': 9,
        'sql': 'CREATE TABLE "v_metadata_chunks01"(rowid PRIMARY KEY, data BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_metadata_chunks02',
        'tbl_name': 'v_metadata_chunks02',
        'rootpage': 11,
        'sql': 'CREATE TABLE "v_metadata_chunks02"(rowid PRIMARY KEY, data BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_metadata_chunks03',
        'tbl_name': 'v_metadata_chunks03',
        'rootpage': 13,
        'sql': 'CREATE TABLE "v_metadata_chunks03"(rowid PRIMARY KEY, data BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_metadata_chunks04',
        'tbl_name': 'v_metadata_chunks04',
        'rootpage': 15,
        'sql': 'CREATE TABLE "v_metadata_chunks04"(rowid PRIMARY KEY, data BLOB NOT NULL)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_rowids',
        'tbl_name': 'v_rowids',
        'rootpage': 4,
        'sql': 'CREATE TABLE "v_rowids"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)',
      }),
      OrderedDict({
        'type': 'table',
        'name': 'v_vector_chunks00',
        'tbl_name': 'v_vector_chunks00',
        'rootpage': 5,
        'sql': 'CREATE TABLE "v_vector_chunks00"(rowid PRIMARY KEY,vectors BLOB NOT NULL)',
      }),
    ]),
  })
# ---
# name: test_stress
  dict({
    'vec_movies_auxiliary': OrderedDict({
      'sql': 'select * from vec_movies_auxiliary',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'value00': 'The Conjuring',
        }),
        OrderedDict({
          'rowid': 2,
          'value00': 'Dumb and Dumber',
        }),
        OrderedDict({
          'rowid': 3,
          'value00': 'Interstellar',
        }),
        OrderedDict({
          'rowid': 4,
          'value00': 'The Lord of the Rings: The Fellowship of the Ring',
        }),
        OrderedDict({
          'rowid': 5,
          'value00': 'An Inconvenient Truth',
        }),
        OrderedDict({
          'rowid': 6,
          'value00': 'Hereditary',
        }),
        OrderedDict({
          'rowid': 7,
          'value00': 'Anchorman: The Legend of Ron Burgundy',
        }),
        OrderedDict({
          'rowid': 8,
          'value00': 'Blade Runner 2049',
        }),
        OrderedDict({
          'rowid': 9,
          'value00': "Harry Potter and the Sorcerer's Stone",
        }),
        OrderedDict({
          'rowid': 10,
          'value00': 'Free Solo',
        }),
        OrderedDict({
          'rowid': 11,
          'value00': 'Get Out',
        }),
        OrderedDict({
          'rowid': 12,
          'value00': 'The Hangover',
        }),
        OrderedDict({
          'rowid': 13,
          'value00': 'The Matrix',
        }),
        OrderedDict({
          'rowid': 14,
          'value00': "Pan's Labyrinth",
        }),
        OrderedDict({
          'rowid': 15,
          'value00': '13th',
        }),
        OrderedDict({
          'rowid': 16,
          'value00': 'It Follows',
        }),
        OrderedDict({
          'rowid': 17,
          'value00': 'Step Brothers',
        }),
        OrderedDict({
          'rowid': 18,
          'value00': 'Inception',
        }),
        OrderedDict({
          'rowid': 19,
          'value00': 'The Shape of Water',
        }),
        OrderedDict({
          'rowid': 20,
          'value00': "Won't You Be My Neighbor?",
        }),
        OrderedDict({
          'rowid': 21,
          'value00': 'Gravity',
        }),
        OrderedDict({
          'rowid': 22,
          'value00': 'Dune',
        }),
        OrderedDict({
          'rowid': 23,
          'value00': 'The Martian',
        }),
        OrderedDict({
          'rowid': 24,
          'value00': 'A Quiet Place',
        }),
        OrderedDict({
          'rowid': 25,
          'value00': 'The Chronicles of Narnia: The Lion, the Witch and the Wardrobe',
        }),
      ]),
    }),
    'vec_movies_chunks': OrderedDict({
      'sql': 'select * from vec_movies_chunks',
      'rows': list([
        OrderedDict({
          'chunk_id': 1,
          'size': 8,
          'validity': b'\xff',
          'rowids': b'\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00',
        }),
        OrderedDict({
          'chunk_id': 2,
          'size': 8,
          'validity': b'\xff',
          'rowids': b'\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00',
        }),
        OrderedDict({
          'chunk_id': 3,
          'size': 8,
          'validity': b'\xff',
          'rowids': b'\x11\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00',
        }),
        OrderedDict({
          'chunk_id': 4,
          'size': 8,
          'validity': b'\x01',
          'rowids': b'\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'vec_movies_metadata_chunks00': OrderedDict({
      'sql': 'select * from vec_movies_metadata_chunks00',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\x06\x00\x00\x00horror\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00comedy\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00fantasy\x00\x00\x00\x00\x00\x0b\x00\x00\x00documentary\x00\x06\x00\x00\x00horror\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00comedy\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00',
        }),
        OrderedDict({
          'rowid': 2,
          'data': b'\x07\x00\x00\x00fantasy\x00\x00\x00\x00\x00\x0b\x00\x00\x00documentary\x00\x06\x00\x00\x00horror\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00comedy\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00fantasy\x00\x00\x00\x00\x00\x0b\x00\x00\x00documentary\x00\x06\x00\x00\x00horror\x00\x00\x00\x00\x00\x00',
        }),
        OrderedDict({
          'rowid': 3,
          'data': b'\x06\x00\x00\x00comedy\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00fantasy\x00\x00\x00\x00\x00\x0b\x00\x00\x00documentary\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00scifi\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00horror\x00\x00\x00\x00\x00\x00',
        }),
        OrderedDict({
          'rowid': 4,
          'data': b'\x07\x00\x00\x00fantasy\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'vec_movies_metadata_chunks01': OrderedDict({
      'sql': 'select * from vec_movies_metadata_chunks01',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'\x99\x00\x00\x00~\x01\x00\x005\x00\x00\x00\xd2\x00\x00\x00]\x00\x00\x00\xa7\x00\x00\x00\xe2\x01\x00\x00-\x01\x00\x00',
        }),
        OrderedDict({
          'rowid': 2,
          'data': b'\x86\x00\x00\x00B\x00\x00\x00X\x00\x00\x00;\x00\x00\x00\xa7\x01\x00\x00\x13\x01\x00\x00\xbf\x00\x00\x00:\x01\x00\x00',
        }),
        OrderedDict({
          'rowid': 3,
          'data': b'J\x00\x00\x00\xc9\x00\x00\x00\x8f\x01\x00\x00\xba\x00\x00\x00V\x01\x00\x00\xc3\x01\x00\x00\n\x02\x00\x00\x0f\x01\x00\x00',
        }),
        OrderedDict({
          'rowid': 4,
          'data': b'6\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'vec_movies_metadata_chunks02': OrderedDict({
      'sql': 'select * from vec_movies_metadata_chunks02',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'data': b'33\x93@ff&@\x00\x00\xa0@ff\x86@\x9a\x99Y@ff\x96@\x9a\x999@\x00\x00\xa0@',
        }),
        OrderedDict({
          'rowid': 2,
          'data': b'33\x83@\xcd\xccL@\xcd\xcc\x9c@333@\x00\x00\x90@fff@\xcd\xcc\x8c@\x9a\x99\x89@',
        }),
        OrderedDict({
          'rowid': 3,
          'data': b'\x00\x00@@\x00\x00\xa0@\xcd\xcc,@\x9a\x99\x99@\x00\x00\x80@\xcd\xcc\x8c@33\x93@\x9a\x99\x89@',
        }),
        OrderedDict({
          'rowid': 4,
          'data': b'\x9a\x99y@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
    'vec_movies_rowids': OrderedDict({
      'sql': 'select * from vec_movies_rowids',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 0,
        }),
        OrderedDict({
          'rowid': 2,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 1,
        }),
        OrderedDict({
          'rowid': 3,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 2,
        }),
        OrderedDict({
          'rowid': 4,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 3,
        }),
        OrderedDict({
          'rowid': 5,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 4,
        }),
        OrderedDict({
          'rowid': 6,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 5,
        }),
        OrderedDict({
          'rowid': 7,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 6,
        }),
        OrderedDict({
          'rowid': 8,
          'id': None,
          'chunk_id': 1,
          'chunk_offset': 7,
        }),
        OrderedDict({
          'rowid': 9,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 0,
        }),
        OrderedDict({
          'rowid': 10,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 1,
        }),
        OrderedDict({
          'rowid': 11,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 2,
        }),
        OrderedDict({
          'rowid': 12,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 3,
        }),
        OrderedDict({
          'rowid': 13,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 4,
        }),
        OrderedDict({
          'rowid': 14,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 5,
        }),
        OrderedDict({
          'rowid': 15,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 6,
        }),
        OrderedDict({
          'rowid': 16,
          'id': None,
          'chunk_id': 2,
          'chunk_offset': 7,
        }),
        OrderedDict({
          'rowid': 17,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 0,
        }),
        OrderedDict({
          'rowid': 18,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 1,
        }),
        OrderedDict({
          'rowid': 19,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 2,
        }),
        OrderedDict({
          'rowid': 20,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 3,
        }),
        OrderedDict({
          'rowid': 21,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 4,
        }),
        OrderedDict({
          'rowid': 22,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 5,
        }),
        OrderedDict({
          'rowid': 23,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 6,
        }),
        OrderedDict({
          'rowid': 24,
          'id': None,
          'chunk_id': 3,
          'chunk_offset': 7,
        }),
        OrderedDict({
          'rowid': 25,
          'id': None,
          'chunk_id': 4,
          'chunk_offset': 0,
        }),
      ]),
    }),
    'vec_movies_vector_chunks00': OrderedDict({
      'sql': 'select * from vec_movies_vector_chunks00',
      'rows': list([
        OrderedDict({
          'rowid': 1,
          'vectors': b'\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A',
        }),
        OrderedDict({
          'rowid': 2,
          'vectors': b'\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A',
        }),
        OrderedDict({
          'rowid': 3,
          'vectors': b'\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A',
        }),
        OrderedDict({
          'rowid': 4,
          'vectors': b'\x00\x00\xc8A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        }),
      ]),
    }),
  })
# ---
# name: test_stress.1
  OrderedDict({
    'sql': '''
      
                select
                  movie_id,
                  title,
                  genre,
                  num_reviews,
                  mean_rating,
                  distance
                from vec_movies
                where synopsis_embedding match '[15.5]'
                  and genre = 'scifi'
                  and num_reviews between 100 and 500
                  and mean_rating > 3.5
                  and k = 5;
              
    ''',
    'rows': list([
      OrderedDict({
        'movie_id': 13,
        'title': 'The Matrix',
        'genre': 'scifi',
        'num_reviews': 423,
        'mean_rating': 4.5,
        'distance': 2.5,
      }),
      OrderedDict({
        'movie_id': 18,
        'title': 'Inception',
        'genre': 'scifi',
        'num_reviews': 201,
        'mean_rating': 5.0,
        'distance': 2.5,
      }),
      OrderedDict({
        'movie_id': 21,
        'title': 'Gravity',
        'genre': 'scifi',
        'num_reviews': 342,
        'mean_rating': 4.0,
        'distance': 5.5,
      }),
      OrderedDict({
        'movie_id': 22,
        'title': 'Dune',
        'genre': 'scifi',
        'num_reviews': 451,
        'mean_rating': 4.400000095367432,
        'distance': 6.5,
      }),
      OrderedDict({
        'movie_id': 8,
        'title': 'Blade Runner 2049',
        'genre': 'scifi',
        'num_reviews': 301,
        'mean_rating': 5.0,
        'distance': 7.5,
      }),
    ]),
  })
# ---
